name: Run Unit Tests In Any Push

on:
  workflow_call:
    inputs:
      docker-compose:
        required: false
        type: string
        default: ''
        description: 'list of compose services separated by space'
      black:
        required: false
        type: boolean
        default: false
      autoflake:
        required: false
        type: boolean
        default: false
      mypy:
        required: false
        type: boolean
        default: false
      mypy_baseline:
        required: false
        type: boolean
        default: false
        description: "runs mypy with mypy-baseline filter"
      python-version:
        type: string
        default: '3.9'
      project-path:
        type: string
        default: src
        description: Main project path containing python source code that will be in production
      test-dotenv-path:
        type: string
        default: ./.env
        description: .env file to use in tests
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          # this is to avoid https://github.com/actions/checkout/issues/881
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pipenv'
      - name: Install Pip and Pipenv
        run: |
          python -m pip install --upgrade pip==23.1.2 pipenv==2023.5.19
          pipenv sync --dev

      - name: Linter (Black)
        if: inputs.black
        run: pipenv run black --check --diff ${{ inputs.project-path }}

      - name: Linter (Autoflake)
        if: inputs.autoflake
        run: pipenv run autoflake -cr ${{ inputs.project-path }}

      - name: Linter (MyPy)
        if: inputs.mypy
        run: pipenv run mypy ${{ inputs.project-path }}
      
      - name: Linter (MyPy baseline)
        if: inputs.mypy_baseline
        # the first command is used to avoid https://github.com/python/mypy/issues/16363
        run: |
          pipenv run mypy ${{ inputs.project-path }} > /dev/null || true
          pipenv run mypy ${{ inputs.project-path }} | pipenv run mypy-baseline filter

      - name: Docker Compose UP
        if: inputs.docker-compose != ''
        run: |
          docker-compose up -d  ${{ inputs.docker-compose }}
          sleep 10
      - name: Run Unit Tests
        env:
          PYTHONPATH: .
          PIPENV_DOTENV_LOCATION: ${{ inputs.test-dotenv-path }}
        run: |
          pipenv run coverage run -m pytest
          pipenv run coverage report --sort cover
