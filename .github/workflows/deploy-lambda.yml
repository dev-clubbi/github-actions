name: Template Deploy Lambda/SLS

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
      python-version:
        type: string
        default: '3.9'
      yarn:
        type: boolean
        default: false
      black:
        required: false
        type: boolean
        default: false
      autoflake:
        required: false
        type: boolean
        default: false
      mypy:
        required: false
        type: boolean
        default: false
      mypy_baseline:
        required: false
        type: boolean
        default: false
        description: "runs mypy with mypy-baseline filter"
      docker-compose:
        required: false
        type: string
        default: ''
        description: 'list of compose services separated by space'
      test:
        required: false
        type: boolean
        default: true
      test-dotenv-path:
        type: string
        default: ./.env
        description: .env file to use in tests
      project-path:
        type: string
        default: src
        description: Main project path containing python source code that will be in production
      lambda_layer:
        type: boolean
        default: true
        description: Enables lambda layer deploy if dependencies change


jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pipenv'
      - name: Install Pip and Pipenv
        run: |
          python -m pip install --upgrade pip==23.1.2 pipenv==2023.5.19
          pipenv sync --dev

      - name: Linter (Black)
        if: inputs.black
        run: pipenv run black --check --diff ${{ inputs.project-path }}

      - name: Linter (Autoflake)
        if: inputs.autoflake
        run: pipenv run autoflake -cr ${{ inputs.project-path }}

      - name: Linter (MyPy)
        if: inputs.mypy
        run: pipenv run mypy ${{ inputs.project-path }}
      
      - name: Linter (MyPy baseline)
        if: inputs.mypy_baseline
        run: pipenv run mypy ${{ inputs.project-path }} | sort | pipenv run mypy-baseline filter

      - name: Docker Compose UP
        if: inputs.docker-compose != ''
        run: |
          docker-compose up -d  ${{ inputs.docker-compose }}
          sleep 10

      - name: Run Unit Tests
        if: inputs.test
        env:
          PYTHONPATH: .
          PIPENV_DOTENV_LOCATION: ${{ inputs.test-dotenv-path }}
        run: |
          pipenv run coverage run -m pytest
          pipenv run coverage report --sort cover


      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: 'npm'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: us-east-1
          role-duration-seconds: 1200

      - name: Install NPM
        if: inputs.yarn == false
        run: |
          npm install --dev
      - name: Install Yarn
        if: inputs.yarn
        run: |
          yarn --dev
      - name: Deploy Layer If needed
        if: inputs.lambda_layer
        run: |
          pipenv run clubbi_sls_utils_deploy_lambda_layer  ${{ inputs.stage }}
      - name: Deploy to Lambda
        run: |
          npx sls deploy -s ${{ inputs.stage }}
